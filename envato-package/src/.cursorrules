# Cursor AI Rules for LawyerHero Project

## Project Context

This is a Next.js 15 lawyer landing page template with TypeScript, Tailwind CSS, and Framer Motion.

## Performance Optimization Rules

### File Processing

- Always prefer reading specific files over full directory scans
- Use targeted grep searches instead of broad codebase searches
- Skip node_modules, .next, and build directories in all operations
- Limit file reads to necessary lines only

### Code Analysis

- Focus on TypeScript and TSX files in src/ directory
- Use semantic searches for specific functionality
- Avoid processing large auto-generated files
- Cache TypeScript compilation results

### Project Structure

- Main source code is in src/ (157 files)
- Configuration files are centralized in src/config/
- Components follow atomic design pattern
- Hooks provide reusable business logic

### Key Files to Prioritize

- src/config/\* - Centralized configuration
- src/components/\* - UI components
- src/hooks/\* - Business logic
- src/lib/\* - Utilities and core functions

### Optimization Guidelines

1. Always exclude node_modules from searches
2. Use incremental TypeScript compilation
3. Leverage Next.js built-in optimizations
4. Focus on changed files in git diff
5. Use path aliases (@/\*) for clean imports

### Memory Management

- Available RAM: 15GB (8GB available)
- CPU Cores: 20
- Disk: 14GB free (88% used - monitor)
- Current project size: 1GB (745MB node_modules)

### Common Operations

- Use `src/config/lawyer.ts` for lawyer data
- Components import from `@/config` for centralized data
- TypeScript strict mode enabled
- ESLint configured for Next.js best practices

## File Patterns to Monitor

- _.ts, _.tsx - Primary development files
- \*.json - Configuration files
- \*.md - Documentation

## Performance Targets

- Keep file operations under 100 files at once
- Prioritize incremental analysis
- Use TypeScript project references when possible
- Leverage Next.js turbopack for faster builds
