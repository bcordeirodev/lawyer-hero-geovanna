#!/bin/bash

# =============================================================================
# CURSOR OPTIMIZATION SCRIPT - LawyerHero Project
# =============================================================================
# Script para otimizar performance do Cursor IDE no projeto
# 
# @author Bruno Cordeiro
# @version 1.0.0
# =============================================================================

set -e

echo "üöÄ Otimizando Cursor para o projeto LawyerHero..."

# =============================================================================
# LIMPEZA DE CACHE
# =============================================================================

echo "üßπ Limpando caches desnecess√°rios..."

# Next.js cache
if [ -d ".next" ]; then
    echo "  - Limpando cache do Next.js..."
    rm -rf .next/cache/*
    rm -f .next/*.json
fi

# TypeScript cache
if [ -f "tsconfig.tsbuildinfo" ]; then
    echo "  - Limpando cache do TypeScript..."
    rm -f tsconfig.tsbuildinfo
fi

# Node modules cache (se necess√°rio)
if [ "$1" = "--deep-clean" ]; then
    echo "  - Limpeza profunda: removendo node_modules..."
    rm -rf node_modules
    npm install
fi

# =============================================================================
# OTIMIZA√á√ÉO DE ARQUIVOS
# =============================================================================

echo "üìÅ Verificando estrutura de arquivos..."

# Contar arquivos por tipo
echo "  - Arquivos TypeScript: $(find src -name "*.ts" -o -name "*.tsx" | wc -l)"
echo "  - Arquivos de configura√ß√£o: $(find . -maxdepth 1 -name "*.json" -o -name "*.js" -o -name "*.ts" | wc -l)"
echo "  - Tamanho do projeto: $(du -sh . | cut -f1)"

# =============================================================================
# VERIFICA√á√ÉO DE RECURSOS
# =============================================================================

echo "üíª Verificando recursos do sistema..."

# RAM dispon√≠vel
RAM_TOTAL=$(free -h | awk '/^Mem:/ {print $2}')
RAM_AVAILABLE=$(free -h | awk '/^Mem:/ {print $7}')
echo "  - RAM Total: $RAM_TOTAL"
echo "  - RAM Dispon√≠vel: $RAM_AVAILABLE"

# CPU cores
CPU_CORES=$(nproc)
echo "  - CPU Cores: $CPU_CORES"

# Espa√ßo em disco
DISK_FREE=$(df -h / | awk 'NR==2 {print $4}')
DISK_USED=$(df -h / | awk 'NR==2 {print $5}')
echo "  - Espa√ßo livre: $DISK_FREE ($DISK_USED usado)"

# =============================================================================
# CONFIGURA√á√ÉO DO CURSOR
# =============================================================================

echo "‚öôÔ∏è  Aplicando configura√ß√µes otimizadas..."

# Verificar se existe .vscode/settings.json
if [ ! -f ".vscode/settings.json" ]; then
    echo "  ‚ùå Arquivo .vscode/settings.json n√£o encontrado!"
    echo "  üìù Execute o script de configura√ß√£o primeiro."
else
    echo "  ‚úÖ Configura√ß√µes do Cursor aplicadas"
fi

# Verificar .cursorrules
if [ ! -f ".cursorrules" ]; then
    echo "  ‚ùå Arquivo .cursorrules n√£o encontrado!"
else
    echo "  ‚úÖ Regras do Cursor configuradas"
fi

# =============================================================================
# OTIMIZA√á√ÉO DO TYPESCRIPT
# =============================================================================

echo "üîß Verificando configura√ß√£o do TypeScript..."

# Verificar se tsconfig tem incrementaliza√ß√£o
if grep -q '"incremental": true' tsconfig.json; then
    echo "  ‚úÖ Compila√ß√£o incremental habilitada"
else
    echo "  ‚ö†Ô∏è  Compila√ß√£o incremental n√£o configurada"
fi

# =============================================================================
# RECOMENDA√á√ïES
# =============================================================================

echo ""
echo "üìã RECOMENDA√á√ïES PARA MELHOR PERFORMANCE:"
echo ""

# Verificar uso de RAM
RAM_PERCENT=$(free | awk '/^Mem:/ {printf "%.0f", $3/$2 * 100.0}')
if [ "$RAM_PERCENT" -gt 80 ]; then
    echo "  ‚ö†Ô∏è  Alto uso de RAM ($RAM_PERCENT%). Considere:"
    echo "     - Fechar outras aplica√ß√µes"
    echo "     - Reiniciar o Cursor"
    echo "     - Aumentar swap se necess√°rio"
fi

# Verificar espa√ßo em disco
DISK_PERCENT=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_PERCENT" -gt 85 ]; then
    echo "  ‚ö†Ô∏è  Pouco espa√ßo em disco ($DISK_PERCENT%). Considere:"
    echo "     - Limpar cache do sistema"
    echo "     - Remover arquivos desnecess√°rios"
    echo "     - Mover projetos antigos"
fi

echo ""
echo "‚ú® OTIMIZA√á√ïES RECOMENDADAS:"
echo "  1. Use busca espec√≠fica em vez de busca global"
echo "  2. Trabalhe em arquivos individuais quando poss√≠vel"
echo "  3. Use o terminal integrado para comandos Git"
echo "  4. Mantenha apenas abas necess√°rias abertas"
echo "  5. Use Ctrl+Shift+P > 'Reload Window' se ficar lento"

echo ""
echo "üéØ ATALHOS √öTEIS NO CURSOR:"
echo "  - Ctrl+P: Busca r√°pida de arquivos"
echo "  - Ctrl+Shift+F: Busca em todo projeto"
echo "  - Ctrl+Shift+P: Command Palette"
echo "  - Ctrl+`: Terminal integrado"
echo "  - Ctrl+Shift+E: Explorer de arquivos"

echo ""
echo "‚úÖ Otimiza√ß√£o conclu√≠da! Reinicie o Cursor para aplicar todas as mudan√ßas."
echo ""

# =============================================================================
# MONITORAMENTO CONT√çNUO
# =============================================================================

if [ "$1" = "--monitor" ]; then
    echo "üîç Iniciando monitoramento de recursos..."
    while true; do
        clear
        echo "=== MONITORAMENTO CURSOR - $(date) ==="
        echo ""
        echo "RAM: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
        echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')"
        echo "Cursor PIDs: $(pgrep -c cursor || echo "0")"
        echo ""
        echo "Pressione Ctrl+C para parar o monitoramento"
        sleep 5
    done
fi